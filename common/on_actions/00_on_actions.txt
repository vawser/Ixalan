#When adding effects directly in on_actions always consider if it would be best to do so through a scripted effect. on_actions with a lot of script in them are harder to get an overview of.

# country
on_startup = {
	
}

# country
on_religion_change = {
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_religion = ROOT
	}
	if = {
		limit = {
			has_regency = no
		}
		set_ruler_religion = ROOT
	}
	if = {
		limit = {
			has_dlc = "Rights of Man"
			has_consort = yes
		}
		set_consort_religion = ROOT
	}
}

# country.
on_secondary_religion_change = {
	
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
	
}

# country
on_colonial_reintegration = {
	
}

# country
on_peace_actor = {
	
}

# country
on_peace_recipient = {
	
}

# country
# root = winning country, from = loser country
on_war_won = {
	
}

# country
# root = loser country, from = winner country
on_war_lost = {
	
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	
}

# province
# root = location, from = loser country
on_battle_won_province = {
	
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
	if = {
		limit = {
			unit_owner = { ai = no } #Scopes to Unit Owner from Unit Scope
			general_with_steam_name = yes #Unit Scope Trigger
		}
		unit_owner = { set_country_flag = general_with_steam_name_won_battle }
	}
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {

}

# province
# root = location, from = country doing it
on_added_to_trade_company ={

}

# province
# root = location, from = country doing it
on_removed_from_company ={

}

# province
# root = location, from = country doing it
on_company_formed ={

}

# province
# root = location, from = country doing it
on_company_disolved ={

}

# province
# root = location, from = winner country
on_battle_lost_province = {
	
}

# country
# root = winning country, from = location
on_siege_won_country = {
	
}

# country
# root = losing country, from = location
on_siege_lost_country = {
}

# province
# root = location, from = losing country
on_siege_won_province = {
	
}

# province
# root = location, from = winning country
on_siege_lost_province =  {
	
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
}

# OBS: Consider that the following on_actions can be called for Personal Union juniors as well.
# country
on_new_monarch = {
	
}

on_new_consort = {
	
}

# country
on_monarch_death = {
	
}

# country
on_regent = {
	
}

# country
on_new_term_election = {
	
}

# country
on_death_election = {
	
}

# country
on_death_foreign_slave_ruler = {
	
}

# country
on_replace_governor = {
	
}


# country
on_bankruptcy = {
}

# country (country annexing, root = target)
on_diplomatic_annex = {
	
}

# country
on_heir_death = {
	
}

# country
on_queen_death = {
    
}

# country
on_new_heir = {
}

# country
on_weak_heir_claim = {
	
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	
}

# Emperor from same dynasty
on_successive_emperor = {
	
}

# HRE Prince released by the emperor
on_released_hre_member = {
	events = {
	}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	events = {
	}
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	events = {
	}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	events = {
	}
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	events = {
	}
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	events = {
	}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	events = {
	}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	events = {
	}
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	events = {
	}
}

on_lock_hre_religion = {
	
}

on_change_hre_religion = {
	
}

on_hre_religion_white_peace = {
	
}

# When a non-native changes government type
on_government_change = {
	
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
}

# Nation is integrated after being in union
on_integrate = {
	
}

# Nation annexed.
# FROM is the nation being annexed
on_annexed = {
	FROM = {
		if = {
			limit = { is_emperor_of_china = yes }
			dismantle_empire_of_china = yes
			set_global_flag = empire_of_china_dismantled
		}
	}
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	events = {

	}
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
	
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
	
}

on_dismantle_revolution = {
	kill_ruler = yes
	set_revolution_target = ---
	if = {
		limit = { has_heir = yes }
		kill_heir = yes
	}
}

# province
on_adm_development = {
}

# province
on_dip_development = {
}

# province
on_mil_development = {
}

on_overextension_pulse = {
	
}


on_colonial_pulse = {
	
}

on_siberian_pulse = {
}


# country random events
on_bi_yearly_pulse = {
	
}

on_bi_yearly_pulse_2 = {
	
}

on_bi_yearly_pulse_3 = {
	
}

on_bi_yearly_pulse_4 = {
}

# country random events
on_thri_yearly_pulse = {
	
}

on_thri_yearly_pulse_2 = {
	
}

on_thri_yearly_pulse_3 = {
	
}

on_thri_yearly_pulse_4 = {
	
}

on_four_year_pulse = {
	
}

on_four_year_pulse_2 = {
}

on_four_year_pulse_3 = {
}

on_four_year_pulse_4 = {
}

on_five_year_pulse = {
	
}


# Estates pulse
on_five_year_pulse_2 = {
	
}

on_five_year_pulse_3 = {
	
}

on_five_year_pulse_4 = {
}

# El Dorado
on_explore_coast = {
	
}
on_conquistador_empty = {
	
}

on_conquistador_native = {
	
}

on_buy_religious_reform = {
	
}

on_circumnavigation = {
	
}

on_become_free_city = {
	
}

on_remove_free_city = {
	
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
	
}

on_revoke_estate_land = {
	
}

on_revoke_estate_land_ai_post = {
	add_local_autonomy = 25
}
on_revoke_estate_land_post = {
	add_local_autonomy = 25
}

on_grant_estate_land = {
	
}

on_death_has_harem = {
	
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {
	
}

# country
on_gain_great_power_status = {
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
}

# province
on_province_religion_converted = {
	
}

# province
on_province_culture_converted = {
}

# THIS = Province, FROM = Country who Propogated
on_convert_by_trade_policy = {
	
}

# province
# FROM = old owner
on_province_owner_change = {
	
}

# country
on_parliament_debate_failed = {
}

# country
on_parliament_debate_succeeded = {
}

# country
#on_harmonized_ = {
#	
#}

# country
on_russian_sudebnik = {

}

# country
on_russian_oprichnina = {

}

# country
on_russian_streltsy = {

}

# province
on_consecrate_patriarch = {
}

# country. from = overlord
on_accept_tribute = {
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
}

# country
on_general_recruited = {
	add_army_professionalism = 0.01
}

# country
on_admiral_recruited = {
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
}

# THIS = Province, FROM = Country
on_regiment_recruited = {

}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	FROM = {
		add_army_professionalism = -0.0015
	}
}

# THIS = One province in the state
on_add_pasha = {
}

# THIS = One province in the state
on_remove_pasha = {
	hidden_effect = {
		owner = {
			save_event_target_as = province_owner
		}
		remove_province_modifier = pasha_removed_modifier
	}

	area = {
		limit = { owned_by = event_target:province_owner }
		add_or_extend_province_modifier_effect = { MODIFIER = pasha_removed_modifier DURATION = 3650 }
	}
}

# THIS = Province
on_janissaries_raised = {
}

on_reform_enacted = {
}

on_reform_changed = {
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {

}

on_center_of_trade_downgrade = {

}

on_culture_promoted = {

}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
	
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	
}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	
}